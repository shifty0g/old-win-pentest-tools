/*****************************************************************
  Filename    : sample.cpp
  Description : check xxxxxx vulnerable
  Author      : glacier
  Update      : 2002-07-09

  Copyright (C) 2002 http://www.xfocus.org   All Rights Reserved
 *****************************************************************/

//-----------------------------------------------------------------
#include <stdio.h>
#include <winsock.h>
#include <string.h>

#pragma comment(lib, "ws2_32.lib")

#define PLUGIN_PARAMS_1     1
#define VULN_MEMBER_NAME    "Sample"
#define MAXLEN              256


/*
 -  AlertUser()
 -
 *  Function:
 *    form of string output:
 *    "[szHostName]: find [szVulnName] vulmerabilities-[szLine]"
 *    when szVlunName==NULL, form is as following:
 *    "[szHostName]: [szLine]"
 *
 *  Parameters:
 *    IN szHostName - file name
 *    IN szVulnName - vulnerabilities name
 *    IN szLine     - strings which will be inserted files
 *
 *  Returned data:
 *    [nothing]
 *
 */
typedef VOID (CALLBACK *PALERT_USER) (
    char *szHostName,
    char *szVulnName,
    char *szLine);


/*
 -  LogToFile()
 -    
 *  Function:
 *    insert strings into LOG file and mark with "<BR>" automatically
 *    allow strings carrying other HTML sentinels
 *
 *  Parameters:
 *    IN szLogFileName - LOG file name
 *    IN sLine         - strings waiting to be inserted files
 *
 *  Returned data:
 *    [nothing]
 *
 */
typedef VOID (CALLBACK *PLOG_TO_FILE) (
    char *szLogFileName,
    char *szLine);


/*
 -  AddToTreeView()
 -
 *  Function:
 *    add nodes to TreeView in the window of X-Scan-GUI
 *
 *  Parameters:
 *    IN szLine       - complete path of nodes and the list separator 
 *                      should be "\n" (for example "127.0.0.1\nPort\n80") 
 *    IN szImageFile  - node ico file (size of this ico file must be 16*16,
 *                      .bmp type) 
 *
 *  Returned data
 *    [nothing]
 *
 */
typedef VOID (CALLBACK *PADD_TO_TREEVIEW) (
    char *szLine,
    char *szImageFile);

 
/* plug-in basic information */
typedef struct _PLUGIN_INFO {
    char    szClassName[50];        /* type of plug-in */
    char    szMemberName[50];       /* name of plug-in components */
    char    szVersion[10];          /* plug-in version */
    char    szFileName[50];         /* original file name of plug-in */
    char    szParamsRequest[50];    /* choose the parameters,such as"-cgi" */
    char    szPrompt[200];          /* explanation of parameter, such as "-cgi: check HTTP vulnerability" */
    int     nSingle;                /* If it's the only vulnerability(the number of vulnerability can be 1 or 0, such as Netbios information) */
    char    szAuthorName[50];       /* Author of the plug-ins */
    char    szRisk[10];             /* vulnerability risk ranking */
    char    szDescription[300];     /* vulnerability description in plug-ins */
    char    szAdvice[300];          /* suggestion about vulnerability in plug-ins */
    DWORD   dwTimeOut;              /* time-out limitation, "0" stands for no limitation */
    int     nParamsType;            /* function type(PLUGIN_PARAMS_1) of plug-in export function "PluginFunc()" */
    int     nMark;                  /* identify whether this plug-in has been selected default */
    char    szImageFile[50];        /* 16*16.bmp ico file (locate in images direcotory without including path) */
} PLUGIN_INFO;

/* plug-in running basic parameters */
typedef struct _SCAN_PARAMS_0 {
    char    szHostName[MAXLEN];     /* host address */
    char    szParams[MAXLEN];       /* user input parameters */
    int     nMaxThread;             /* max thread number */
    int     *pnThreadCount;         /* number of total active thread */
    int     *pnPluginThreadCount;   /* number of active thread what was created by current plug-in */
    char    *szCurrentSchedule;     /* current schedule */
    DWORD   *plTimeOut;             /* limitation of timeout, and "0" means no limit */
    int     nVerbose;               /* if display the detail information */
    char    szLogFileName[MAXLEN];  /* log file name(including the path) */
    char    szResultBuf[MAXLEN];    /* dynamical returned information */
    int     nVulnCount;             /* number of vulnerabilities */
} SCAN_PARAMS_0;

/* plug-in running parameters */
typedef struct _SCAN_PARAMS_1 {
    SCAN_PARAMS_0       stBaseParams;   /* basic parameter (SCAN_PARAMS_0) */
    PALERT_USER         pAlertUser;     /* call-back function "AlertUser()" address */
    PLOG_TO_FILE        pLogToFile;     /* call-back function "LogToFile()" address */
    PADD_TO_TREEVIEW    pAddToTreeView; /* call-back function "AddToTreeView()" address */
} SCAN_PARAMS_1;
                  

/* This function is quoted when initializing plug-ins, which is used to acquire the plug-in basic information.
   Returned value: TRUE -- plug-in initialized successfully; FALSE -- plug-in initialization failed */
extern "C" __declspec(dllexport) BOOL GetPluginInfo(PLUGIN_INFO*);

/* This function is quoted when scanning host. Input the host information and return the scanning result.
   Returned value: TRUE -- there are some vulnerabilities; FALSE -- there's no vulnerabilities */
extern "C" __declspec(dllexport) BOOL PluginFunc(SCAN_PARAMS_1*);


static PALERT_USER      pAlertUser      = NULL;
static PLOG_TO_FILE     pLogToFile      = NULL;
static PADD_TO_TREEVIEW pAddToTreeView  = NULL;


int CheckVuln(char *szHostName, char *szLogFileName)
{
    char szLine[MAXLEN] = {0};
    char szVulnName[MAXLEN] = {0};
    char szVulnContent[MAXLEN] = {0};
    int nRtn = 0;

    // ...
    
    nRtn++;
    strcpy(szVulnName, VULN_MEMBER_NAME);
    strcpy(szVulnContent, "vuln_1");

    pAlertUser(szHostName, szVulnName, szVulnContent);
    sprintf(szLine, "Found %s", szVulnContent);
    pLogToFile(szLogFileName, szLine);
    sprintf(szLine, "%s\n%s\n%s", szHostName, szVulnName, szVulnContent);
    pAddToTreeView(szLine, "alert.bmp");

    // ...

    nRtn++;
    strcpy(szVulnContent, "vuln_2");

    pAlertUser(szHostName, szVulnName, szVulnContent);
    sprintf(szLine, "Found %s", szVulnContent);
    pLogToFile(szLogFileName, szLine);
    sprintf(szLine, "%s\n%s\n%s", szHostName, szVulnName, szVulnContent);
    pAddToTreeView(szLine, "alert.bmp");

    return nRtn;
}

/*
 -  GetPluginInfo()
 -
 *  Function:
 *    The function is quoted when initializing plug-ins,
 *    initializing plug-ins,
 *    which is used to acquire the plug-in basic information.
 *
 *  Parameter:
 *    OUT pstPluginInfo   -  plug-in basic information
 *    IN
 *
 *  Result:
 *    TRUE                -  plug-in initialized successfully
 *    FALSE               -  plug-in initialization failed
 */
__declspec(dllexport) BOOL GetPluginInfo(PLUGIN_INFO *pstPluginInfo)
{
    strcpy(pstPluginInfo->szClassName, "SAMPLE");
    strcpy(pstPluginInfo->szMemberName, VULN_MEMBER_NAME);
    strcpy(pstPluginInfo->szVersion, "1.0");
    strcpy(pstPluginInfo->szFileName, "sample.dll");
    strcpy(pstPluginInfo->szParamsRequest, "-sample");
    strcpy(pstPluginInfo->szPrompt, "-sample: check xxxxxx");
    pstPluginInfo->nSingle = 0;
    strcpy(pstPluginInfo->szAuthorName, "glacier");
    strcpy(pstPluginInfo->szRisk, "high");
    strcpy(pstPluginInfo->szDescription, "");
    strcpy(pstPluginInfo->szAdvice, "");
    pstPluginInfo->dwTimeOut = 0;
    pstPluginInfo->nParamsType = PLUGIN_PARAMS_1;
    pstPluginInfo->nMark = 1;
    strcpy(pstPluginInfo->szImageFile, "alert.bmp");

    return TRUE;
}


/*
 -  PluginFunc()
 -
 *  Function:
 *    This function is quoted when scanning host.
 *    Input the host information and return the scanning result.
 *
 *  Parameter:
 *    OUT IN pstScanParams    -  plug-in running parameters
 *
 *  Result:
 *    TRUE                    -  there are some vulnerabilities
 *    FALSE                   -  there's no vulnerabilities
 */
__declspec(dllexport) BOOL PluginFunc(SCAN_PARAMS_1 *pstScanParams_1)
{
    char    szHostName[MAXLEN] = {0};
    char    szLogFileName[MAXLEN] = {0};
    int     nVerbose = 0;
    int     nVulnCount = 0;
    int     nMaxThread = 0;
    int     *pnThreadCount = NULL;
    int     *pnPluginThreadCount = NULL;

    BOOL    bResult = FALSE;

    strcpy(szHostName, pstScanParams_1->stBaseParams.szHostName);
    strcpy(szLogFileName, pstScanParams_1->stBaseParams.szLogFileName);
    nVerbose = pstScanParams_1->stBaseParams.nVerbose;
    nMaxThread = pstScanParams_1->stBaseParams.nMaxThread;
    pnThreadCount = pstScanParams_1->stBaseParams.pnThreadCount;
    pnPluginThreadCount = pstScanParams_1->stBaseParams.pnPluginThreadCount;
    pAlertUser = pstScanParams_1->pAlertUser;
    pLogToFile = pstScanParams_1->pLogToFile;
    pAddToTreeView = pstScanParams_1->pAddToTreeView;
    pstScanParams_1->stBaseParams.nVulnCount = 0;

    while ((*pnThreadCount) >= nMaxThread) {
        Sleep(100);
    }

    (*pnThreadCount)++;
    (*pnPluginThreadCount)++;

    strcpy(pstScanParams_1->stBaseParams.szCurrentSchedule, "Checking xxxxxx ...");

    if (nVerbose) {
        pAlertUser(szHostName, NULL, "Checking xxxxxx ...");
    }

    __try {
        nVulnCount = CheckVuln(szHostName, szLogFileName);
    }
    __except (EXCEPTION_EXECUTE_HANDLER) {
        __try {
            pAlertUser(NULL, NULL, "Function \"CheckVuln()\" causes an exception.");
        }
        __except (EXCEPTION_EXECUTE_HANDLER) {
            printf("%s\n", "Function \"CheckVuln()\" causes an exception, failed to alert user.");
        }
    }

    (*pnThreadCount)--;
    (*pnPluginThreadCount)--;

    pstScanParams_1->stBaseParams.nVulnCount = nVulnCount;
    if (nVulnCount > 0) {
        bResult = TRUE;
    }

    pAlertUser(szHostName, NULL, "xxxxxx scan complete.");

    return bResult;
}


/*
 -  DllEntryPoint()
 -
 *  Function:
 *            Dll entry point
 *
 *  Parameter:
 *            OUT
 *            IN
 *
 *  Result:
 *
 */
int WINAPI DllEntryPoint(HINSTANCE hinst, unsigned long reason, void*)
{
    return 1;
}
//---------------------------------------------------------------------------
