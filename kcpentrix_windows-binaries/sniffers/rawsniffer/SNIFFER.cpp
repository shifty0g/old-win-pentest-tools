////////////////////////////////////////////////////////////////////////////////////
//                             Raw Sniffer Code  V1.2                             //
//                        powered by shadow @2004/11/28                           //
//                   my web:http://www.codehome.6600.org                          //
////////////////////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "SNIFFER.h"
#include "BASE641.h"
#define MAXDATALEN 65535
//
#define SMTPSTEP       5        //各项嗅探完成步骤
#define FTPSTEP        2
#define POPSTEP        2
#define TELNETSTEP     2
//#define MAX_TIMEOUT    120    //嗅探超时
//
#define SMTP     1              //各项类别标记
#define POP      2
#define FTP      3
#define TELNET   4
#define POST     5              
#define NORMAL   6              //普通未处理数据包
//
#pragma comment(lib,"wsock32.lib")
//
//用户定义信息结构体
typedef struct _USERINFO{          //参数信息结构体 
CString ProtoType;                 //协议类型
CString sourceip;                  //源ip
CString sourceport;                //源端口
CString destip;                    //目的ip
CString destport;                  //目的端口
char SnifferDataPath[MAX_PATH];    //smtp和pop嗅探路径
bool SmtpSniffStart;               //各项开始标记
bool PopSniffStart;
bool TelnetSniffStart;
bool PostSniffStart;
bool FtpSniffStart; 
bool PacketSniffStart;
bool LogData;
bool Echo;
bool Filter;
bool OutputByHex;     
bool HighSniff; 
int Way;                   //嗅探方式,1[单向嗅探],0[双向嗅探]
int MaxData;               //最大记录,单位M
int timeout;               //嗅探超时，超过一定时间[s]，信息存储区将会清空被重复利用
}USERINFO,LPUSERINFO;
//
typedef struct _LISTENIPINFO{  //敏感信息存储结构体，包括smtp,pop,ftp,telnet
CString proto;                 //一次点对点会话只占用一个该结构体
CString sourceip;
CString sourceport;
CString destip;
CString destport;
CString username;
CString password;
CString mailfrom;
CString rcptto;
int step;
long lrecord_time;              //最后收到的数据包时间
}LISTENIPINFO,LPLISTENIPINFO;
//
extern USERINFO sniffuserinfo;
LISTENIPINFO ListenIpList[MAX_SUBTHREAD_NUM];     //监听列表
//
SOCKET RawSocket; 
FILE *fsniffer;
int BasePort;
//
extern void WriteUserDefine();
//get local ip
char * GetLocalIp(){
char hostname[100];
char *hostip;
hostent *myhost;
gethostname(hostname,100);
myhost=gethostbyname(hostname);
hostip=inet_ntoa(*(in_addr *)myhost->h_addr_list[0]);
return hostip;
}
//获得协议类型
char * GetProtocol(unsigned char proto){  
   switch(proto){
     case IPPROTO_TCP:return IPPROTO_TCP_TXT;break;
	 case IPPROTO_UDP:return IPPROTO_UDP_TXT;break;
	 case IPPROTO_ICMP:return IPPROTO_ICMP_TXT;break;
	 case IPPROTO_IGMP:return IPPROTO_IGMP_TXT;break;
	 default:return IPPROTO_DEFAULT_TXT;break;
	 }
 }
//get time
CString GetCurrentSystemTime(){
SYSTEMTIME systemtime;
GetSystemTime(&systemtime);
CString datetime;
datetime.Format("%d-%d-%d %d:%d:%d",systemtime.wYear,systemtime.wMonth,systemtime.wDay,systemtime.wHour,systemtime.wMinute,systemtime.wSecond);
return datetime;
}
//回显敏感数据嗅探结果，包括smtp,ftp,pop,telnet
void EchoSnifferString(int i,int SniffType){
CString type;
switch(SniffType){
  case SMTP:
     type="SMTP";
	 break;
  case FTP:
     type="FTP";
	 break;
  case POP:
     type="POP";
	 break;
  case TELNET:
     type="TELNET";
	 break;
  default:break;
  }
printf("\r\n--------> %s 嗅探结果:\r\n",type);
printf("%-4s%-17s%-6s--> %-17s%-6s %s\r\n",ListenIpList[i].proto,ListenIpList[i].sourceip,ListenIpList[i].sourceport,ListenIpList[i].destip,ListenIpList[i].destport,GetCurrentSystemTime());
printf("UserName:%s\r\n",ListenIpList[i].username);
printf("PassWord:%s\r\n",ListenIpList[i].password);
if(SniffType==SMTP){
   printf("%s\r\n",ListenIpList[i].mailfrom);
   printf("%s\r\n",ListenIpList[i].rcptto);
   }
}
//
//输出敏感数据嗅探结果，包括smtp,ftp,pop,telnet
void WriteSnifferString(int i,int SniffType){
CString type;
switch(SniffType){
  case SMTP:
     type="SMTP";
	 break;
  case FTP:
     type="FTP";
	 break;
  case POP:
     type="POP";
	 break;
  case TELNET:
     type="TELNET";
	 break;
  default:break;
  }
fsniffer=fopen(sniffuserinfo.SnifferDataPath,"ab+");
if(fsniffer==NULL) return;
fprintf(fsniffer,"\r\n--------> %s 嗅探结果:\r\n",type);
fprintf(fsniffer,"%-4s%-17s%-6s--> %-17s%-6s %s\r\n",ListenIpList[i].proto,ListenIpList[i].sourceip,ListenIpList[i].sourceport,ListenIpList[i].destip,ListenIpList[i].destport,GetCurrentSystemTime());
fprintf(fsniffer,"UserName:%s\r\n",ListenIpList[i].username);
fprintf(fsniffer,"PassWord:%s\r\n",ListenIpList[i].password);
if(SniffType==SMTP){
   fprintf(fsniffer,"%s\r\n",ListenIpList[i].mailfrom);
   fprintf(fsniffer,"%s\r\n",ListenIpList[i].rcptto);
   }
fclose(fsniffer);
}
//回显普通包和POST数据包
void EchoPacketString(int SniffType,CString Protocol,CString FromIp,CString FromPort,CString DestIp,CString DestPort,CString DataLen,CString PacketData){
if(SniffType==POST)
  printf("\r\n--------> POST 嗅探结果:\r\n%-4s%-17s%-6s-->  %-17s%-6s %s\r\n%s\r\n\0",Protocol,FromIp,FromPort,DestIp,DestPort,GetCurrentSystemTime(),PacketData);
else 
  printf("\r\n%-4s%-17s%-6s-->  %-17s%-6s%5s Bytes %s\r\n------------------------------------------------------\r\n\0",Protocol,FromIp,FromPort,DestIp,DestPort,DataLen,GetCurrentSystemTime());
}
//输出普通包和POST数据包
void WritePacketString(int SniffType,CString Protocol,CString FromIp,CString FromPort,CString DestIp,CString DestPort,CString DataLen,CString PacketData){
     unsigned char HexData[MAXDATALEN];
	 ZeroMemory(HexData,sizeof(HexData));
	 fsniffer=fopen(sniffuserinfo.SnifferDataPath,"ab+");
	 if(fsniffer!=NULL){
	   if(SniffType==POST){
         fprintf(fsniffer,"\r\n--------> POST 嗅探结果:\r\n%-4s%-17s%-6s-->  %-17s%-6s%5s Bytes %s\r\n%s\r\n\0",Protocol,FromIp,FromPort,DestIp,DestPort,DataLen,GetCurrentSystemTime(),PacketData);	    
	     fflush(fsniffer);
	     fclose(fsniffer);
	     return;
	     }
       fprintf(fsniffer,"%-6s%-17s%-8s-->  %-17s%-6s%5s Bytes %s\r\n---------------------------------------------------------------------------------------------\r\n",Protocol,FromIp,FromPort,DestIp,DestPort,DataLen,GetCurrentSystemTime());
	   if(sniffuserinfo.OutputByHex){
	     sprintf((char *)HexData,"%s",PacketData);
	     for(int i=0,j=1;i<atoi(DataLen);i++,j++){
		   fprintf(fsniffer,"0x%02X,",HexData[i]);
		   if(j%20==0){
		      fputs("\r\n",fsniffer);
			  j=0;
			  }
		   }
		 }
	   else fwrite(PacketData,atoi(DataLen),1,fsniffer);
	   fputs("\r\n\r\n---------------------------------------------------------------------------------------------\r\n",fsniffer);
	   fflush(fsniffer);
	   fclose(fsniffer);
	   }
	 else printf("File can not create...\r\n");
}
//check ip if is listened
int IpIsListened(CString proto,CString sourceip,CString sourceport,CString destip,CString destport){
  int i;
  for(i=0;i<MAX_SUBTHREAD_NUM;i++){
     if(ListenIpList[i].proto==proto&&ListenIpList[i].sourceip==sourceip&&ListenIpList[i].sourceport==sourceport)
	   if(ListenIpList[i].destip==destip&&ListenIpList[i].destport==destport) return i;
	 }
  return -1;
}
//更新最后收到数据包的时间
void UpdateLastVisitTime(int i){
SYSTEMTIME systemtime;
GetSystemTime(&systemtime);
ListenIpList[i].lrecord_time=systemtime.wHour*3600+systemtime.wMinute*60+systemtime.wSecond;
}
//判断会话是否已经在监听队列，返回队列下标，没有返回-1
int InsertListenIpList(CString proto,CString sourceip,CString sourceport,CString destip,CString destport){
       int i;
	   for(i=0;i<MAX_SUBTHREAD_NUM;i++){
	      if(ListenIpList[i].proto==""){
		     ListenIpList[i].proto=proto;
			 ListenIpList[i].sourceip=sourceip;
			 ListenIpList[i].sourceport=sourceport;
			 ListenIpList[i].destip=destip;
			 ListenIpList[i].destport=destport;
			 ListenIpList[i].step=0;
			 ListenIpList[i].username="";
			 ListenIpList[i].password="";
			 ListenIpList[i].mailfrom="";
			 ListenIpList[i].rcptto="";
	         UpdateLastVisitTime(i);
			 return i;
			 }
		  }
       return -1;
}
//重置监听队列某项
void ResetListenIp(int i){
		     ListenIpList[i].proto="";
			 ListenIpList[i].sourceip="";
			 ListenIpList[i].sourceport="";
			 ListenIpList[i].destip="";
			 ListenIpList[i].destport="";
			 ListenIpList[i].step=0;
			 ListenIpList[i].username="";
			 ListenIpList[i].password="";
			 ListenIpList[i].mailfrom="";
			 ListenIpList[i].rcptto="";
			 ListenIpList[i].lrecord_time=0;
}
//产生原始套接字
SOCKET BornRawSocket(){
SOCKET Socket;
sockaddr_in localsock;
Socket=socket(AF_INET,SOCK_RAW,IPPROTO_IP);
if(Socket==INVALID_SOCKET) return 0;
int rcvtimeout=5000;
if(setsockopt(Socket,SOL_SOCKET,SO_RCVTIMEO,(const char *)&rcvtimeout,sizeof(rcvtimeout))==SOCKET_ERROR) return 0;
localsock.sin_family=AF_INET;
localsock.sin_port=htons(++BasePort);
localsock.sin_addr.S_un.S_addr=inet_addr(GetLocalIp());
if(bind(Socket,(const sockaddr *)&localsock,sizeof(localsock))==SOCKET_ERROR) return 0;
DWORD dwValue=1;
if(ioctlsocket(Socket,SIO_RCVALL,&dwValue)==SOCKET_ERROR) return 0;
return Socket;
}
//检查smtp包
int CheckSmtpPacket(CString Protocol,CString FromIp,CString FromPort,CString DestIp,CString DestPort,CString DataLen,CString PacketData){
int i,index;
i=IpIsListened(Protocol,FromIp,FromPort,DestIp,DestPort);
if(i==-1){
  i=InsertListenIpList(Protocol,FromIp,FromPort,DestIp,DestPort);
  if(i==-1) return 0;
  else
    if(sniffuserinfo.Echo) printf("\r\n申请SMTP信息存储区域ListenIpList[%d]:[OK]\r\n",i);
  }
UpdateLastVisitTime(i);
CString LowSnifferStr;
CString Encodestr,Decodestr;
LowSnifferStr=PacketData;
LowSnifferStr.MakeLower();
if(ListenIpList[i].step==0&&(LowSnifferStr.Find("auth login",0)==0)){
    ListenIpList[i].step++;
	return 0;
	}
else if(ListenIpList[i].step==1){
	if(index=PacketData.Find("\r\n",0)){
	    Encodestr=PacketData.Mid(0,index);
		ListenIpList[i].step++;
		}
    }
else if(ListenIpList[i].step==2){
	if(index=PacketData.Find("\r\n",0)){
	    Encodestr=PacketData.Mid(0,index);
		ListenIpList[i].step++;
		}
    }
else if(ListenIpList[i].step==3&&LowSnifferStr.Find("mail from:",0)==0){
	if(index=PacketData.Find("\r\n",0)){
	    ListenIpList[i].mailfrom=PacketData.Mid(0,index);
        ListenIpList[i].step++;
		}
	}
else if(ListenIpList[i].step==4&&LowSnifferStr.Find("rcpt to:",0)==0){
	if(index=PacketData.Find("\r\n",0)){
		ListenIpList[i].rcptto=PacketData.Mid(0,index);
		ListenIpList[i].step++;
	    }
    }
else;
if(ListenIpList[i].step==2||ListenIpList[i].step==3){
   BASE64 base64;
   char encodestr[50];
   ZeroMemory(encodestr,sizeof(encodestr));
   sprintf(encodestr,"%s",Encodestr);
   Decodestr.Format("%s",base64.StringDecode((unsigned char *)encodestr));
   }
if(ListenIpList[i].step==2) ListenIpList[i].username=Decodestr;
else if(ListenIpList[i].step==3) ListenIpList[i].password=Decodestr;
else;
if(ListenIpList[i].step==SMTPSTEP){
   if(sniffuserinfo.Echo) EchoSnifferString(i,SMTP);
   if(sniffuserinfo.LogData) WriteSnifferString(i,SMTP);
   ResetListenIp(i);
   if(sniffuserinfo.Echo) printf("\r\n重置SMTP信息存储区域ListenIpList[%d]:[OK]\r\n",i);
   }
return 1;
}
//
//检查pop包
int CheckPopPacket(CString Protocol,CString FromIp,CString FromPort,CString DestIp,CString DestPort,CString DataLen,CString PacketData){
int i,index,strlength;
i=IpIsListened(Protocol,FromIp,FromPort,DestIp,DestPort);
if(i==-1){
  i=InsertListenIpList(Protocol,FromIp,FromPort,DestIp,DestPort);
  if(i==-1) return 0;
  else
    if(sniffuserinfo.Echo) printf("\r\n申请POP信息存储区域ListenIpList[%d]:[OK]\r\n",i);
  }
UpdateLastVisitTime(i);
CString LowSnifferStr;
CString Encodestr,Decodestr;
LowSnifferStr=PacketData;
LowSnifferStr.MakeLower();
if(ListenIpList[i].step==0&&LowSnifferStr.Find("user",0)==0){
  if(index=PacketData.Find(" ",0)){
	 strlength=PacketData.GetLength()-index-1;
	 ListenIpList[i].username=PacketData.Mid(index+1,strlength-2);
     ListenIpList[i].step++;
     }
  }
else if(ListenIpList[i].step==1&&LowSnifferStr.Find("pass",0)==0){
  if(index=PacketData.Find(" ",0)){
	 strlength=PacketData.GetLength()-index-1;
	 ListenIpList[i].password=PacketData.Mid(index+1,strlength-2);
     ListenIpList[i].step++;
	 }
  }
else;
if(ListenIpList[i].step==POPSTEP){
   if(sniffuserinfo.Echo) EchoSnifferString(i,POP);
   if(sniffuserinfo.LogData) WriteSnifferString(i,POP);
   ResetListenIp(i);
   if(sniffuserinfo.Echo) printf("\r\n重置POP信息存储区域ListenIpList[%d]:[OK]\r\n",i);
   }
return 1;
}
//
//检查ftp包
int CheckFtpPacket(CString Protocol,CString FromIp,CString FromPort,CString DestIp,CString DestPort,CString DataLen,CString PacketData){
int i,index,strlength;
i=IpIsListened(Protocol,FromIp,FromPort,DestIp,DestPort);
if(i==-1){
  i=InsertListenIpList(Protocol,FromIp,FromPort,DestIp,DestPort);
  if(i==-1) return 0;
  else
    if(sniffuserinfo.Echo) printf("\r\n申请FTP信息存储区域ListenIpList[%d]:[OK]\r\n",i);
  }
UpdateLastVisitTime(i);
CString LowSnifferStr;
LowSnifferStr=PacketData;
LowSnifferStr.MakeLower();
if(ListenIpList[i].step==0&&LowSnifferStr.Find("user",0)==0){
  if(index=PacketData.Find(" ",0)){
	 strlength=PacketData.GetLength()-index-1;
	 ListenIpList[i].username=PacketData.Mid(index+1,strlength-2);
     ListenIpList[i].step++;
     }
  }
else if(ListenIpList[i].step==1&&LowSnifferStr.Find("pass",0)==0){
  if(index=PacketData.Find(" ",0)){
	 strlength=PacketData.GetLength()-index-1;
	 ListenIpList[i].password=PacketData.Mid(index+1,strlength-2);
     ListenIpList[i].step++;
	 }
  }
else;
if(ListenIpList[i].step==FTPSTEP){
   if(sniffuserinfo.Echo) EchoSnifferString(i,FTP);
   if(sniffuserinfo.LogData) WriteSnifferString(i,FTP);
   ResetListenIp(i);
   if(sniffuserinfo.Echo) printf("\r\n重置FTP信息存储区域ListenIpList[%d]:[OK]\r\n",i);
   }
return 1;
}
//
//检查telnet包
int CheckTelnetPacket(CString Protocol,CString FromIp,CString FromPort,CString DestIp,CString DestPort,CString DataLen,CString PacketData){
int i,index,strlength;
i=IpIsListened(Protocol,FromIp,FromPort,DestIp,DestPort);
if(i==-1){
  i=InsertListenIpList(Protocol,FromIp,FromPort,DestIp,DestPort);
  if(i==-1) return 0;
  else 
    if(sniffuserinfo.Echo) printf("\r\n申请TELNET信息存储区域ListenIpList[%d]:[OK]\r\n",i);
  }
UpdateLastVisitTime(i);
if(PacketData.GetLength()==1||PacketData.GetLength()==2){
   if(PacketData=="\r"||PacketData=="\n"||PacketData.GetLength()==2){
      ListenIpList[i].step++;
	  return 0;
	  }
   if(PacketData.GetLength()==1&&ListenIpList[i].step==0) ListenIpList[i].username+=PacketData;
   else if(PacketData.GetLength()==1&&ListenIpList[i].step==1) ListenIpList[i].password+=PacketData;
   else;
   }
//else if(PacketData.GetLength()==2) 
else;
if(ListenIpList[i].step==TELNETSTEP){
   if(sniffuserinfo.Echo) EchoSnifferString(i,TELNET);
   if(sniffuserinfo.LogData) WriteSnifferString(i,TELNET);
   ResetListenIp(i);
   if(sniffuserinfo.Echo) printf("\r\n重置TELNET信息存储区域ListenIpList[%d]:[OK]\r\n",i);
   }
return 1;
}
//判断post包中是否有关键字
bool CheckPostData(CString PacketData){
  char FlagStr[][10]={"login","user","name","pass","pwd","mail"};
  int i;
  PacketData.MakeLower();
  for(i=0;i<6;i++){
     if(PacketData.Find(FlagStr[i],0)>0) return true;
	 }
  return false;
}
//存储和回显post包
void SavePostData(CString Protocol,CString FromIp,CString FromPort,CString DestIp,CString DestPort,CString DataLen,CString PacketData){
int index,datalen;
CString LogData;
if(Protocol=="TCP"&&PacketData.Find("POST")==0){
  if(CheckPostData(PacketData)){
    datalen=PacketData.GetLength();
	index=PacketData.Find("\r\n\r\n",0);
	if(index<=0) return;
	index+=4;
	LogData=PacketData.Mid(index,datalen-index);
	DataLen.Format("%d",datalen-index); 
	if(DataLen=="0") return;
    if(sniffuserinfo.Echo) EchoPacketString(POST,Protocol,FromIp,FromPort,DestIp,DestPort,DataLen,LogData);
	if(sniffuserinfo.LogData) WritePacketString(POST,Protocol,FromIp,FromPort,DestIp,DestPort,DataLen,LogData);
    }
  }
}

//存储和回显普通包
int SaveSnifferData(CString Protocol,CString FromIp,CString FromPort,CString DestIp,CString DestPort,CString DataLen,CString PacketData)
{
bool cansave=false;
if(sniffuserinfo.Filter&&DataLen=="0") return 0;
//单向嗅探
if(sniffuserinfo.ProtoType.Find(Protocol,0)>=0||sniffuserinfo.ProtoType=="*")
  if(sniffuserinfo.sourceip.Find(FromIp,0)>=0||sniffuserinfo.sourceip=="*")
     if(sniffuserinfo.sourceport.Find(FromPort,0)>=0||sniffuserinfo.sourceport=="*")
	    if(sniffuserinfo.destip.Find(DestIp,0)>=0||sniffuserinfo.destip=="*")
		   if(sniffuserinfo.destport.Find(DestPort,0)>=0||sniffuserinfo.destport=="*")
		      cansave=true;

//双向嗅探
if(sniffuserinfo.Way==0){
if(sniffuserinfo.ProtoType.Find(Protocol,0)>=0||sniffuserinfo.ProtoType=="*")
  if(sniffuserinfo.sourceip.Find(DestIp,0)>=0||sniffuserinfo.sourceip=="*")
     if(sniffuserinfo.sourceport.Find(DestPort,0)>=0||sniffuserinfo.sourceport=="*")
	    if(sniffuserinfo.destip.Find(FromIp,0)>=0||sniffuserinfo.destip=="*")
		   if(sniffuserinfo.destport.Find(FromPort,0)>=0||sniffuserinfo.destport=="*")
		      cansave=true;
}
if(cansave){
     int hfile;
	 hfile=open(sniffuserinfo.SnifferDataPath,O_RDONLY|O_BINARY);
	 if(hfile){
	    long flen=filelength(hfile);
		if((flen/1024/1024)>sniffuserinfo.MaxData){
           close(hfile);
		   remove(sniffuserinfo.SnifferDataPath);
		   }
        else close(hfile);
		}
     if(sniffuserinfo.Echo) EchoPacketString(NORMAL,Protocol,FromIp,FromPort,DestIp,DestPort,DataLen,PacketData);
	 if(sniffuserinfo.LogData) WritePacketString(NORMAL,Protocol,FromIp,FromPort,DestIp,DestPort,DataLen,PacketData);
	 return 1;
     }
return 0;
}
//监听队列状态线程
UINT StatusWatchThread(LPVOID info){
long current_seconds;
int i,timeout;
SYSTEMTIME systemtime;
while(true){
  Sleep(100);
  GetSystemTime(&systemtime);
  current_seconds=systemtime.wHour*3600+systemtime.wMinute*60+systemtime.wSecond;
  for(i=0;i<MAX_SUBTHREAD_NUM;i++){
    timeout=current_seconds-ListenIpList[i].lrecord_time;
    if((timeout>sniffuserinfo.timeout||timeout<0)&&ListenIpList[i].lrecord_time!=0){
      ResetListenIp(i);
	  if(sniffuserinfo.Echo) printf("\r\n销毁超时信息存储区域ListenIpList[%d]:[OK]\r\n",i);
	  }
    }
  }
}
//主嗅探线程
UINT SnifferThread(LPVOID form_ptr){
MSG msg;
char buffer[MAXDATALEN];
int readnum,totalbytes,datalen,HeaderLen;
bool can=true;
IP_HEADER *IpHeader;
TCP_HEADER *TcpHeader;
UDP_HEADER *UdpHeader;
ICMP_HEADER *IcmpHeader;
CString FromIp,DestIp,FromPort,DestPort,Protocol,PacketData,DataLen,SnifferStr;
char fromip[20],destip[20];
char *pdata;
SNIFFER *getform=static_cast<SNIFFER *>(form_ptr);
getform->MainThreadId=GetCurrentThreadId();
while(true){
   if(PeekMessage(&msg,NULL,WM_SNIFFER_CLOSE,WM_SNIFFER_CLOSE,PM_REMOVE)){
     closesocket(RawSocket);
     TRACE("mainthread close ok1 and send message!");
     break;
     }
   if(PeekMessage(&msg,NULL,WM_SNIFFER_STOP,WM_SNIFFER_STOP,PM_REMOVE)){
     TRACE("go stop ok!");
     while(true){
	     Sleep(100);
		 if(PeekMessage(&msg,NULL,WM_SNIFFER_RESTART,WM_SNIFFER_RESTART,PM_REMOVE)){
		    TRACE("restart ok!");
			break;
			}
		 if(PeekMessage(&msg,NULL,WM_SNIFFER_CLOSE,WM_SNIFFER_CLOSE,PM_REMOVE)){
		    closesocket(RawSocket);
		    TRACE("thread close ok!2");
			return 0;
			}
		 }
	 }
   //sniffer deail code
   ZeroMemory(buffer,MAXDATALEN);
   datalen=0;
   readnum=recv(RawSocket,buffer,MAXDATALEN,0);
   if(readnum==SOCKET_ERROR){
     getform->ErrorCode=13;
	 return 1;
	 }
   IpHeader=(IP_HEADER *)buffer;
   Protocol.Format("%s",GetProtocol((unsigned char)IpHeader->Protocol));
   sprintf(fromip,"%d.%d.%d.%d",IpHeader->FromIP.address[0],IpHeader->FromIP.address[1],IpHeader->FromIP.address[2],IpHeader->FromIP.address[3]);
   sprintf(destip,"%d.%d.%d.%d",IpHeader->ToIP.address[0],IpHeader->ToIP.address[1],IpHeader->ToIP.address[2],IpHeader->ToIP.address[3]);
   FromIp.Format("%s",fromip);
   DestIp.Format("%s",destip);
   totalbytes=ntohs(IpHeader->TotalLen);
   HeaderLen=(IpHeader->VersionHdl&0x0f)*4;
   totalbytes-=HeaderLen;
   switch(IpHeader->Protocol){
      case IPPROTO_ICMP:
	     IcmpHeader=(ICMP_HEADER *)(buffer+HeaderLen);
		 datalen=totalbytes-ICMP_HEADER_LEN;
		 FromPort.Format("-");
		 DestPort.Format("-");
		 pdata=(char *)IcmpHeader+ICMP_HEADER_LEN;
		 PacketData.Format("type:%d code:%d data:%s",IcmpHeader->Type,IcmpHeader->Code,pdata);
         break;
	  case IPPROTO_UDP:
	     UdpHeader=(UDP_HEADER *)(buffer+HeaderLen);
		 datalen=totalbytes-UDP_HEADER_LEN;
		 FromPort.Format("%d",ntohs(UdpHeader->FromPort));
		 DestPort.Format("%d",ntohs(UdpHeader->ToPort));
		 pdata=(char *)UdpHeader+UDP_HEADER_LEN;
		 PacketData.Format("%s",pdata);
		 break;
	  case IPPROTO_TCP:
	     TcpHeader=(TCP_HEADER *)(buffer+HeaderLen);
		 HeaderLen=((TcpHeader->HeaderLen)>>4)*4;
         FromPort.Format("%d",ntohs(TcpHeader->FromPort));
		 DestPort.Format("%d",ntohs(TcpHeader->ToPort));
		 pdata=(char *)TcpHeader+HeaderLen;
		 PacketData.Format("%s",pdata);
		 datalen=totalbytes-HeaderLen;
		 break;
	  default:
	     FromPort.Format("-");
		 DestPort.Format("-");
		 datalen=totalbytes;
		 PacketData.Format("");
		 break;
	  }
   DataLen.Format("%d",datalen);
   if(sniffuserinfo.PacketSniffStart)
       SaveSnifferData(Protocol,FromIp,FromPort,DestIp,DestPort,DataLen,PacketData);
   //
   if(sniffuserinfo.SmtpSniffStart&&DestPort=="25"&&DataLen!="0"){
       CheckSmtpPacket(Protocol,FromIp,FromPort,DestIp,DestPort,DataLen,PacketData);
	   }
   if(sniffuserinfo.FtpSniffStart&&DestPort=="21"&&DataLen!="0"){
       CheckFtpPacket(Protocol,FromIp,FromPort,DestIp,DestPort,DataLen,PacketData);
	  }
   if(sniffuserinfo.PopSniffStart&&DestPort=="110"&&DataLen!="0"){
       CheckPopPacket(Protocol,FromIp,FromPort,DestIp,DestPort,DataLen,PacketData);
	  }
   if(sniffuserinfo.TelnetSniffStart&&DestPort=="23"&&DataLen!="0"){
       CheckTelnetPacket(Protocol,FromIp,FromPort,DestIp,DestPort,DataLen,PacketData);
	  }
//
   if(sniffuserinfo.PostSniffStart&&DataLen!="0")
     SavePostData(Protocol,FromIp,FromPort,DestIp,DestPort,DataLen,PacketData);
//
   if(!sniffuserinfo.HighSniff) Sleep(1);
   }	
return 0;	 
}


//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

SNIFFER::SNIFFER()
{
int i;
WsaStartup=false;
BasePort=LISTEN_PORT;
SnifferState=SNIFFER_STATE_CLOSE;
SnifferError[0]="operate success!";
SnifferError[1]="WSAStartup failed!";
SnifferError[2]="Sniffer has start!";
SnifferError[3]="Sniffer is stoping!";
SnifferError[4]="Invalid Socket!";
SnifferError[5]="setsockopt rcvtimeo failed!";
SnifferError[6]="setsockopt iphdrincl failed!";
SnifferError[7]="bind socket failed!";
SnifferError[8]="ioctlsocket failed!";
SnifferError[9]="thread is not stop!";
SnifferError[10]="thread close failed!";
SnifferError[11]="no thread run!";
SnifferError[12]="thread is not start!";
SnifferError[13]="recv data error!";
SnifferError[14]="send message to subthread error!";
WORD wsaVersion;
WSADATA WSAData;
wsaVersion=MAKEWORD(2,0);
if(WSAStartup(wsaVersion,&WSAData)==SOCKET_ERROR){
   ErrorCode=1;
   }
else{ 
   ErrorCode=0;
   WsaStartup=true;
   }
}
//
SNIFFER::~SNIFFER()
{
if(WsaStartup) WSACleanup();
}
//
int SNIFFER::Start(/*LPVOID form_ptr*/)
{
if(WsaStartup){
//Form_ptr=form_ptr;
if(SnifferState==SNIFFER_STATE_START){
  ErrorCode=2;
  return ErrorCode;
  }
if(SnifferState==SNIFFER_STATE_STOP){
  ErrorCode=3;
  return ErrorCode;
  }
RawSocket=BornRawSocket();
if(RawSocket==0){
  ErrorCode=4;
  return ErrorCode;
  }
SnifferState=SNIFFER_STATE_START;
if(sniffuserinfo.LogData) WriteUserDefine();
AfxBeginThread(SnifferThread,(LPVOID)this);     //开始主嗅探线程
AfxBeginThread(StatusWatchThread,(LPVOID)NULL); //开始监听队列状态线程
ErrorCode=0;
return ErrorCode;
}
else{
ErrorCode=1;
return ErrorCode;
}
}
//
int SNIFFER::ReStart()
{
if(SnifferState=SNIFFER_STATE_STOP){
  if(MainThreadId){
    PostThreadMessage(MainThreadId,WM_SNIFFER_RESTART,NULL,NULL);
    ErrorCode=0;
    return ErrorCode;
	}
  else{
    ErrorCode=11;
	return ErrorCode;
	}
  }
ErrorCode=9;
return ErrorCode;
}
//
int SNIFFER::SnifferClose()
{
if(SnifferState!=SNIFFER_STATE_CLOSE){
  if(MainThreadId){
    PostThreadMessage(MainThreadId,WM_SNIFFER_CLOSE,NULL,NULL);
	SnifferState=SNIFFER_STATE_CLOSE;
	MainThreadId=0;
    ErrorCode=0;
    return ErrorCode;
	}
  else{
    ErrorCode=11;
	return ErrorCode;
	}
  }
ErrorCode=10;
return ErrorCode;
}
//
int SNIFFER::Stop()
{
if(SnifferState=SNIFFER_STATE_START){
  if(MainThreadId){
    PostThreadMessage(MainThreadId,WM_SNIFFER_STOP,NULL,NULL);
    ErrorCode=0;
    return ErrorCode;
	}
  else{
    ErrorCode=11;
	return ErrorCode;
	}
  }
ErrorCode=12;
return ErrorCode;
}
//
char * SNIFFER::GetLastError(int errorcode)
{
return SnifferError[errorcode];
}





