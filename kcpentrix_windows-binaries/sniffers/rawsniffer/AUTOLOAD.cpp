//////////////////////////////////////////////////////////////////////
//File:AUTOLOAD.cpp
//Use:auto run program
//powered by shadow at 2004/11/25
//Has bugs please mail to:dreamshadow@mail.sdu.edu.cn
//More Useful Class go to my web:http:www.codehome.6600.org
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include <afxdisp.h>
//#include "Windows.h"
#include "Winsvc.h"
#include "AUTOLOAD.h"
//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

AUTOLOAD::AUTOLOAD()
{

}

AUTOLOAD::~AUTOLOAD()
{

}

int AUTOLOAD::AutoLoadByRun(char *exefile, char *regname)
{
HKEY Hregkey;
DWORD AccessFlag;
AccessFlag=REG_CREATED_NEW_KEY; //REG_OPENED_EXISTING_KEY
RegCreateKeyEx(HKEY_LOCAL_MACHINE,"SOFTWARE\\MICROSOFT\\WINDOWS\\CURRENTVERSION\\RUN\\",0L,NULL,REG_OPTION_NON_VOLATILE,KEY_ALL_ACCESS|KEY_SET_VALUE,NULL,&Hregkey,&AccessFlag);
RegSetValueEx(Hregkey,regname,0,REG_SZ,(const unsigned char *)exefile,strlen(exefile));
RegCloseKey(Hregkey);
return 1;
}

int AUTOLOAD::AutoLoadByLink(char *exefile, char *linktype)
{
HKEY Hregkey;
DWORD AccessFlag;
char ExeFile[200];
char LinkType[100];
strcpy(ExeFile,exefile);
strcat(ExeFile," %1");
strcpy(LinkType,linktype);
strcat(LinkType,"\\shell\\open\\command\\");
AccessFlag=REG_CREATED_NEW_KEY; //REG_OPENED_EXISTING_KEY
RegCreateKeyEx(HKEY_CLASSES_ROOT,LinkType,0L,NULL,REG_OPTION_NON_VOLATILE,KEY_ALL_ACCESS|KEY_SET_VALUE,NULL,&Hregkey,&AccessFlag);
RegSetValueEx(Hregkey,NULL,0,REG_SZ,(const unsigned char *)ExeFile,strlen(ExeFile));
RegCloseKey(Hregkey);
return 1;
}
//

int AUTOLOAD::RegUninstallByRun(char *groupname)
{
HKEY Hregkey;
DWORD AccessFlag;
char GetGroupName[100];
char KeyValue[255];
DWORD index,ValueType,MaxLen,NameLen;
AccessFlag=REG_OPENED_EXISTING_KEY;
index=0;
MaxLen=255;
NameLen=100;
RegCreateKeyEx(HKEY_LOCAL_MACHINE,"SOFTWARE\\MICROSOFT\\WINDOWS\\CURRENTVERSION\\RUN\\",0L,NULL,REG_OPTION_NON_VOLATILE,KEY_ALL_ACCESS|KEY_SET_VALUE,NULL,&Hregkey,&AccessFlag);
//RegEnumValue(Hregkey,index,GetGroupName,&NameLen,0,&ValueType,(unsigned char *)KeyValue,&MaxLen);
RegDeleteValue(Hregkey,groupname);
/*do{
     if(strcmp(GetGroupName,groupname)==0){
	    RegDeleteValue(Hregkey,groupname);
	    
		}
		TRACE(GetGroupName);

  }while(RegEnumValue(Hregkey,index,GetGroupName,&NameLen,0,&ValueType,(unsigned char *)KeyValue,&MaxLen)==ERROR_SUCCESS);
*/
return 1;
}

int AUTOLOAD::RegUninstallByLink(char *linktype)
{
HKEY Hregkey;
DWORD AccessFlag;
char LinkType[100];
strcpy(LinkType,linktype);
strcat(LinkType,"\\");
AccessFlag=REG_OPENED_EXISTING_KEY; //REG_OPENED_EXISTING_KEY
RegCreateKeyEx(HKEY_CLASSES_ROOT,LinkType,0L,NULL,REG_OPTION_NON_VOLATILE,KEY_ALL_ACCESS|KEY_SET_VALUE,NULL,&Hregkey,&AccessFlag);
//RegSetValueEx(Hregkey,NULL,0,REG_SZ,(const unsigned char *)"%1",2);
RegDeleteKey(Hregkey,"shell");
RegCloseKey(Hregkey);
return 1;
}
//------------------------------------------------------------>
//以下代码来自hhkkk在www.xfocus.net上公布的http代理中的代码
//------------------------------------------------------------>
int AUTOLOAD::InstallService(char *svr_name, char *display_name,char *exepath, int starttype)
{
SC_HANDLE hService,hSCManager;
hSCManager=OpenSCManager(NULL,NULL,SC_MANAGER_ALL_ACCESS);
if(hSCManager==NULL) return 0;
hService=CreateService(hSCManager,svr_name,display_name,
		SERVICE_ALL_ACCESS,          // desired access 
		SERVICE_WIN32_OWN_PROCESS,   // service type 
		starttype,                   //SERVICE_AUTO_START
		SERVICE_ERROR_NORMAL,        // error control type 
		exepath,                     // service's binary 
		NULL,                        // no load ordering group 
		NULL,                        // no tag identifier 
		NULL,                        // no dependencies 
		NULL,                        // LocalSystem account 
		NULL);                       // no password          
if(hService==NULL) return 0;
CloseServiceHandle(hService);
return 1;
}
//
int AUTOLOAD::DeleteServiceByName(char *svr_name)
{
SC_HANDLE hService,hSCManager;
hSCManager=OpenSCManager(NULL,NULL,SC_MANAGER_ALL_ACCESS);
if(hSCManager==NULL) return 0;
hService=OpenService(hSCManager,svr_name,SERVICE_ALL_ACCESS);
if(hService==NULL) return 0;
if(DeleteService(hService)==0) return 0;
if(CloseServiceHandle(hService)==0) return 0;
return 1;
}
