/*===============================================================================================
                                  RawSniffer V1.2
                            powered by shadow at 2004/11/28
                          my web:http://www.codehome.6600.org
                    Has bugs please mail to:dreamshadow@mail.sdu.edu.cn
Usage:
-si 源ip     -di 目的ip       *代表所有，多项用,号分割
-sp 源端口   -dp 目的端口     *代表所有
-p  嗅探协议[TCP,UDP,ICMP]大写
-w  嗅探方式，1代表单向嗅探[si->di]，0代表双向嗅探[si<->di]
-m  最大记录文件，以M为单位
-o  文件输出
-hex 十六进制输出到文件
-unecho 不回显 
-unfilter 不过虑0字节数据包
-low 粗略嗅探，丢包率高，cpu利用率低 基本0%
-timeout 嗅探超时,除非你的网络状况比较差否则请不要随便调高,默认为120秒
-sniffsmtp   嗅探smtp
-sniffpop    嗅探pop
-snifftelnet 嗅探telnet
-sniffpost   嗅探post
-sniffftp    嗅探ftp ，以上5个嗅探不受参数si,sp,di,dp,w,p,hex影响.
-sniffpacket 嗅探指定规则数据包，受参数si,sp,di,dp,w,p,hex影响.
-sniffall    开启所有嗅探
-install servername [-disname displayname]  安装成服务启动 [可带启动参数,服务名带空格请用_代替,如sniffer ok->sniffer_ok]
-uninstall servername 卸载服务
Example:
   rawsniffer -p TCP -dp 25,110 -o f:\1.txt -m -sniffpacket   嗅探指定规则数据抱并保存到文件
   rawsniffer -sniffsmtp                                   只嗅探smtp，输出到屏幕
   rawsniffer -sniffall -dp 0 -o f:\1.txt                  嗅探smtp,pop,ftp,post,telnet保存到文件，[-dp 0]过滤无用包
   rawsniffer -sniffall -dp 0 -o f:\1.txt -install sniffer -disname fuck 安装成服务启动并带参数
   rawsniffer -uninstall sniffer                           卸载服务
Note:参数可自由排序组合!安装成服务模式时最好加上-unecho选项.
=================================================================================================*/
#include "stdafx.h"
#include "SNIFFER.h"
#include "AUTOLOAD.h"
//
#define NORMAL    1   //正常启动
#define SERVICE   2   //服务启动
#define INSTALL   3   //安装服务
#define UNINSTALL 4   //卸载服务
/*
#define NORM "\033[00;00m"
#define GREEN "\033[01;32m"
#define YELL "\033[01;33m"
#define RED "\033[01;31m"
*/
typedef struct _SERVERINFO{    //服务所需信息结构体
char param[255];
char svr_name[255];
char display_name[255];
}SERVERINFO,LPSERVERINFO;
//用户定义信息结构体
typedef struct _USERINFO{          //参数信息结构体 
CString ProtoType;                 //协议类型
CString sourceip;                  //源ip
CString sourceport;                //源端口
CString destip;                    //目的ip
CString destport;                  //目的端口
char SnifferDataPath[MAX_PATH];    //smtp和pop嗅探路径
bool SmtpSniffStart;               //各项开始标记
bool PopSniffStart;
bool TelnetSniffStart;
bool PostSniffStart;
bool FtpSniffStart; 
bool PacketSniffStart;
bool LogData;
bool Echo;
bool Filter;
bool OutputByHex;     
bool HighSniff; 
int Way;                   //嗅探方式,1[单向嗅探],0[双向嗅探]
int MaxData;               //最大记录,单位M
int timeout;               //嗅探超时，超过一定时间[s]，信息存储区将会清空被重复利用
}USERINFO,LPUSERINFO;
//
SERVERINFO serverinfo;
USERINFO sniffuserinfo;
int AppRunWay;
SERVICE_STATUS m_ServiceStatus;
SERVICE_STATUS_HANDLE h_ServiceStatusCtrl;
SNIFFER rsniffer;
//
extern CString GetCurrentSystemTime();
//
void ShowUserDefine(){     //显示用户定义信息
printf(">>This is user define:\r\n");
printf("Protocol:  [%s]\r\n",sniffuserinfo.ProtoType);
printf("Source IP: [%-18s]\t\tSource Port: [%s]\r\n",sniffuserinfo.sourceip,sniffuserinfo.sourceport);
printf("Dest   IP: [%-18s]\t\tDest   Port: [%s]\r\n",sniffuserinfo.destip,sniffuserinfo.destport);
printf("Sniff SMTP:\t");
if(sniffuserinfo.SmtpSniffStart) printf("[true]\r\n");
else printf("[false]\r\n");
printf("Sniff POP:\t");
if(sniffuserinfo.PopSniffStart) printf("[true]\r\n");
else printf("[false]\r\n");
printf("Sniff FTP:\t");
if(sniffuserinfo.FtpSniffStart) printf("[true]\r\n");
else printf("[false]\r\n");
printf("Sniff Telnet:\t");
if(sniffuserinfo.TelnetSniffStart) printf("[true]\r\n");
else printf("[false]\r\n");
printf("Sniff POST:\t");
if(sniffuserinfo.PostSniffStart) printf("[true]\r\n");
else printf("[false]\r\n");
printf("Sniff PACKET:\t");
if(sniffuserinfo.PacketSniffStart) printf("[true]\r\n");
else printf("[false]\r\n");
printf("Sniff Filter:\t");
if(sniffuserinfo.Filter) printf("[true]\r\n");
else printf("[false]\r\n");
printf("Sniff Way:\t");
if(sniffuserinfo.Way) printf("[si->di]\r\n");
else printf("[si<->di]\r\n");
printf("Sniff Mode:\t");
if(sniffuserinfo.HighSniff) printf("[high]\r\n");
else printf("[low]\r\n");
printf("Sniff TimeOut:\t[%d] seconds\r\n",sniffuserinfo.timeout);
printf("Save File Path:\t[%s]\r\n",sniffuserinfo.SnifferDataPath);
printf("Max  File Len :\t[%d] M\r\n",sniffuserinfo.MaxData);
printf("Save File Mode:\t");
if(sniffuserinfo.OutputByHex) printf("[HEX]\r\n");
else printf("[ASC]\r\n");
}
void WriteUserDefine(){   //输出用户定义信息到文件
FILE *fsniffer;
fsniffer=fopen(sniffuserinfo.SnifferDataPath,"ab+");
if(fsniffer==NULL) return;
fprintf(fsniffer,"\r\n=============================================================================================\r\n");
fprintf(fsniffer,"Raw Sniffer V1.2\r\npowered by shadow @2004/11/28\r\nMy web:http://www.codehome.6600.org\r\n");
fprintf(fsniffer,"Has bugs please mail to me:dreamshadow@mail.sdu.edu.cn\r\n");
fprintf(fsniffer,">>This is user define:\r\n");
fprintf(fsniffer,"Protocol:  [%s]\r\n",sniffuserinfo.ProtoType);
fprintf(fsniffer,"Source IP: [%-18s]\t\tSource Port: [%s]\r\n",sniffuserinfo.sourceip,sniffuserinfo.sourceport);
fprintf(fsniffer,"Dest   IP: [%-18s]\t\tDest   Port: [%s]\r\n",sniffuserinfo.destip,sniffuserinfo.destport);
fprintf(fsniffer,"Sniff SMTP:\t");
if(sniffuserinfo.SmtpSniffStart) fprintf(fsniffer,"true\r\n");
else fprintf(fsniffer,"false\r\n");
fprintf(fsniffer,"Sniff POP:\t");
if(sniffuserinfo.PopSniffStart) fprintf(fsniffer,"true\r\n");
else fprintf(fsniffer,"false\r\n");
fprintf(fsniffer,"Sniff FTP:\t");
if(sniffuserinfo.FtpSniffStart) fprintf(fsniffer,"true\r\n");
else fprintf(fsniffer,"false\r\n");
fprintf(fsniffer,"Sniff Telnet:\t");
if(sniffuserinfo.TelnetSniffStart) fprintf(fsniffer,"true\r\n");
else fprintf(fsniffer,"false\r\n");
fprintf(fsniffer,"Sniff POST:\t");
if(sniffuserinfo.PostSniffStart) fprintf(fsniffer,"true\r\n");
else fprintf(fsniffer,"false\r\n");
fprintf(fsniffer,"Sniff PACKET:\t");
if(sniffuserinfo.PacketSniffStart) fprintf(fsniffer,"true\r\n");
else fprintf(fsniffer,"false\r\n");
fprintf(fsniffer,"Sniff Filter:\t");
if(sniffuserinfo.Filter) fprintf(fsniffer,"[true]\r\n");
else fprintf(fsniffer,"[false]\r\n");
fprintf(fsniffer,"Sniff Way:\t");
if(sniffuserinfo.Way) fprintf(fsniffer,"si->di\r\n");
else fprintf(fsniffer,"si<->di\r\n");
fprintf(fsniffer,"Sniff Mode:\t");
if(sniffuserinfo.HighSniff) fprintf(fsniffer,"high\r\n");
else fprintf(fsniffer,"low\r\n");
fprintf(fsniffer,"Sniff TimeOut:\t[%d] seconds\r\n",sniffuserinfo.timeout);
fprintf(fsniffer,"Save File Path:\t[%s]\r\n",sniffuserinfo.SnifferDataPath);
fprintf(fsniffer,"Max  File Len :\t[%d] M\r\n",sniffuserinfo.MaxData);
fprintf(fsniffer,"Save File Mode:\t");
if(sniffuserinfo.OutputByHex) fprintf(fsniffer,"[HEX]\r\n");
else fprintf(fsniffer,"[ASC]\r\n");
fprintf(fsniffer,"Sniff Start At %s\r\n=============================================================================================\r\n",GetCurrentSystemTime());
fclose(fsniffer);
}
void ShowHelp(){
printf("\r\n================================================================================\r\n");
printf("\t\tRawSniffer V1.2\r\n\t\tPowered by shadow @2004/11/28\r\n\t\tmy web:http://www.codehome.6600.org\r\n\t\tHas bugs please mail to:dreamshadow@mail.sdu.edu.cn\r\n");
printf("\r\n================================================================================\r\n");
printf("Usage:\r\n");
printf("-si 源ip     -di 目的ip       *代表所有,多项用,号分割\r\n");
printf("-sp 源端口   -dp 目的端口     *代表所有\r\n");
printf("-w  嗅探方式，1代表单向嗅探[si->di]，0代表双向嗅探[si<->di]\r\n");
printf("-p  嗅探协议[TCP,UDP,ICMP]大写\r\n");
printf("-m  最大记录文件，以M为单位\r\n");
printf("-o  文件输出\r\n");
printf("-hex 十六进制输出到文件\r\n");
printf("-unecho 不回显 \r\n");
printf("-unfilter 不过虑0字节数据包\r\n");
printf("-low 粗略嗅探，丢包率高，cpu利用率低 基本0%\r\n");
printf("-timeout 嗅探超时,除非你的网络状况比较差否则请不要随便调高,默认为120秒\r\n");
printf("-sniffsmtp\t  嗅探smtp\r\n");
printf("-sniffpop\t  嗅探pop\r\n");
printf("-sniffpost\t  嗅探post\r\n");
printf("-sniffftp\t  嗅探ftp\r\n");
printf("-snifftelnet\t  嗅探telnet，以上5个嗅探不受参数si,sp,di,dp,w,p影响.\r\n");
printf("-sniffpacket\t  规则嗅探数据包，受参数si,sp,di,dp,w,p影响.\r\n");
printf("-sniffall\t  开启所有嗅探\r\n");
printf("-install servername [-disname displayname]\r\n   安装成服务启动 [可带启动参数,服务名带空格请用_代替,如sniffer ok->sniffer_ok]\r\n");
printf("-uninstall servername \r\n   卸载服务\r\n");
printf("Example:\r\n");
printf(" rsniffer -p TCP -dp 25,110 -o f:\\1.txt -m 1 -sniffpacket\r\n   嗅探指定规则数据抱并保存到文件\r\n");
printf(" rsniffer -sniffsmtp                                 \r\n   只嗅探smtp，输出到屏幕\r\n");
printf(" rsniffer -sniffall -dp 0 -o f:\\1.txt               \r\n   嗅探smtp,pop,ftp,post,telnet保存到文件,[-dp 0]过滤无用包\r\n");
printf(" rsniffer -sniffall -dp 0 -o f:\\1.txt -install sniffer -disname fuck \r\n   安装成服务启动并带参数\r\n");
printf(" rsniffer -uninstall sniffer                        \r\n   卸载服务\r\n");
printf("Note:\r\n  参数可自由排序组合!安装成服务模式时最好加上-unecho选项.\r\n");
}
//
//server code from hhkk's httpproxy
//-----------------------------------------------------------------------------------------
void WINAPI ServiceCtrlFunc(DWORD Opcode)
{
	switch(Opcode) 
	{ 
	case SERVICE_CONTROL_PAUSE:     //// we accept the command to pause it
		m_ServiceStatus.dwCurrentState = SERVICE_PAUSED; 
		break; 
	case SERVICE_CONTROL_CONTINUE:  //// we got the command to continue
		m_ServiceStatus.dwCurrentState = SERVICE_RUNNING; 
		break; 
	case SERVICE_CONTROL_STOP:      //// we got the command to stop this service
		//m_ServiceStatus.dwWin32ExitCode = 0; 		
		//m_ServiceStatus.dwCheckPoint = 0; 
		//m_ServiceStatus.dwWaitHint = 0; 
		m_ServiceStatus.dwCurrentState = SERVICE_STOPPED; 
		break;
	case SERVICE_CONTROL_INTERROGATE:
		break; 
	} 	
	SetServiceStatus(h_ServiceStatusCtrl,&m_ServiceStatus);
	return; 
}
//
void WINAPI ServiceMain(DWORD argc,char *argv[]){
    AppRunWay=SERVICE;
	m_ServiceStatus.dwServiceType = SERVICE_WIN32;
	m_ServiceStatus.dwControlsAccepted = SERVICE_ACCEPT_STOP;
	m_ServiceStatus.dwWin32ExitCode = 0; 
	m_ServiceStatus.dwServiceSpecificExitCode = 0; 
	m_ServiceStatus.dwCheckPoint = 0; 
	m_ServiceStatus.dwWaitHint = 0;
	m_ServiceStatus.dwCurrentState = SERVICE_RUNNING; 
	h_ServiceStatusCtrl = RegisterServiceCtrlHandler("ShadowSniffer",ServiceCtrlFunc);
	if (h_ServiceStatusCtrl == (SERVICE_STATUS_HANDLE)0) return;
    SetServiceStatus(h_ServiceStatusCtrl, &m_ServiceStatus);
	rsniffer.Start();
	while(true) Sleep(100);
}
//
int InstallService(){
    AUTOLOAD autoload;
	printf("\r\nServer  Name: [%s]\r\nDisplay Name: [%s]\r\n",serverinfo.svr_name,serverinfo.display_name);
	printf("Server Param: [%s]\r\nInstall Server: ",serverinfo.param);
    if(autoload.InstallService(serverinfo.svr_name,serverinfo.display_name,serverinfo.param,SERVICE_AUTO_START)){
	   printf("[OK]\r\nNote:Please Use CMD:[net start %s] to start server!\r\n",serverinfo.svr_name);
	   }
	else{
	   printf("[FAILED]\r\nNote:Maybe the service is exist!\r\n");
	   return 0;
	   }
	return 1;
}
//
int UninstallService(){
    AUTOLOAD autoload;
	printf("\r\nServer      Name: [%s]\r\n",serverinfo.svr_name);
	printf("Uninstall Server: ",serverinfo.param);
    if(autoload.DeleteServiceByName(serverinfo.svr_name)){
	   printf("[OK]\r\n");
	   }
	else{
	   printf("[FAILED]\r\nNote:Are you true the service name is right?\r\n");
	   return 0;
	   }
	return 1;
}	   
//
void NormalRun(){
    char ch;
	ShowUserDefine();
	printf("Are you true?(y/n)");
    ch=getch();
	if(ch!='y') return;
	printf("\r\n>>Start sniff after 3 seconds...\r\n>>Please press ctrl+c to end...\r\n");
	Sleep(3000);
	printf(">>Sniff ready OK,is running...\r\n");
	rsniffer.Start();
	while(true) Sleep(100);
}
//-----------------------------------------------------------------------------------------
//---------------------------------it start to run----------------------------------------------
int main(int argc, char* argv[])
{	
    int i;
	char exepath[MAX_PATH];
    AppRunWay=NORMAL;                                   //各项初始化
	::GetModuleFileName(NULL,exepath,sizeof(exepath));
	strcpy(serverinfo.param,exepath);
	strcat(serverinfo.display_name,"Windows Get Current Inetinfo");
	strcpy(serverinfo.svr_name,"Inetinfo");
	//
    sniffuserinfo.SmtpSniffStart=false;
	sniffuserinfo.PopSniffStart=false;
	sniffuserinfo.PacketSniffStart=false;
	sniffuserinfo.PostSniffStart=false;
	sniffuserinfo.TelnetSniffStart=false;
	sniffuserinfo.FtpSniffStart=false;
	sniffuserinfo.LogData=false;
	sniffuserinfo.Echo=true;
	sniffuserinfo.OutputByHex=false;
	sniffuserinfo.HighSniff=true;
	sniffuserinfo.Filter=true;
	sniffuserinfo.sourceip="*";
	sniffuserinfo.sourceport="*";
	sniffuserinfo.destip="*";
	sniffuserinfo.destport="*";
	sniffuserinfo.ProtoType="TCP";
	sniffuserinfo.Way=1;
	sniffuserinfo.MaxData=0;
	sniffuserinfo.timeout=120;
	strcpy(sniffuserinfo.SnifferDataPath,"Data not save");
	if(argc<=1||strcmp(argv[1],"-help")==0){
	  ShowHelp();
	  return 0;
	  }
    for(i=1;i<argc;i++){    //参数提取，未加错误检测代码
	   if(strcmp(argv[i],"-sniffsmtp")==0||strcmp(argv[i],"-sniffall")==0) sniffuserinfo.SmtpSniffStart=true;
	   if(strcmp(argv[i],"-sniffpop")==0||strcmp(argv[i],"-sniffall")==0) sniffuserinfo.PopSniffStart=true;
	   if(strcmp(argv[i],"-sniffpost")==0||strcmp(argv[i],"-sniffall")==0) sniffuserinfo.PostSniffStart=true;
	   if(strcmp(argv[i],"-snifftelnet")==0||strcmp(argv[i],"-sniffall")==0) sniffuserinfo.TelnetSniffStart=true;
       if(strcmp(argv[i],"-sniffftp")==0||strcmp(argv[i],"-sniffall")==0) sniffuserinfo.FtpSniffStart=true;
       if(strcmp(argv[i],"-sniffpacket")==0||strcmp(argv[i],"-sniffall")==0) sniffuserinfo.PacketSniffStart=true;
	   if(strcmp(argv[i],"-low")==0) sniffuserinfo.HighSniff=false;
	   if(strcmp(argv[i],"-hex")==0) sniffuserinfo.OutputByHex=true;
	   if(strcmp(argv[i],"-unecho")==0) sniffuserinfo.Echo=false;
       if(strcmp(argv[i],"-unfilter")==0) sniffuserinfo.Filter=false;
	   if(strcmp(argv[i],"-timeout")==0) sniffuserinfo.timeout=atoi(argv[++i]);
	   if(strcmp(argv[i],"-p")==0) sniffuserinfo.ProtoType.Format("%s",argv[++i]);
	   if(strcmp(argv[i],"-si")==0) sniffuserinfo.sourceip.Format("%s",argv[++i]);
	   if(strcmp(argv[i],"-sp")==0) sniffuserinfo.sourceport.Format("%s",argv[++i]);
	   if(strcmp(argv[i],"-di")==0) sniffuserinfo.destip.Format("%s",argv[++i]);
	   if(strcmp(argv[i],"-dp")==0) sniffuserinfo.destport.Format("%s",argv[++i]);
	   if(strcmp(argv[i],"-w")==0) sniffuserinfo.Way=atoi(argv[++i]);
	   if(strcmp(argv[i],"-m")==0) sniffuserinfo.MaxData=atoi(argv[++i]);
	   if(strcmp(argv[i],"-o")==0){
	     strcpy(sniffuserinfo.SnifferDataPath,argv[++i]);
		 sniffuserinfo.LogData=true;
		 }
	   if(strcmp(argv[i],"-service")==0) AppRunWay=SERVICE;
	   if(strcmp(argv[i],"-install")==0) AppRunWay=INSTALL;
	   if(strcmp(argv[i],"-uninstall")==0) AppRunWay=UNINSTALL;
	   }
	if(AppRunWay==INSTALL||AppRunWay==UNINSTALL){ //判断是否安装
      for(i=1;i<argc;i++){ //读取安装所需参数信息并组装
	     if(strcmp(argv[i],"-install")==0||strcmp(argv[i],"-uninstall")==0) strcpy(serverinfo.svr_name,argv[++i]);
		 else if(strcmp(argv[i],"-disname")==0) strcpy(serverinfo.display_name,argv[++i]);
         else{
		    strcat(serverinfo.param," ");
			strcat(serverinfo.param,argv[i]);
			}
		 }
	  strcat(serverinfo.param," -service");
	  int len,j;
	  len=strlen(serverinfo.svr_name);
	  for(j=0;j<len;j++){
	   if(serverinfo.svr_name[j]=='_') 
	      serverinfo.svr_name[j]=' ';
	   }
	  }
	switch(AppRunWay){
	   case INSTALL:           //INSTALL SERVER
	        InstallService();
			return 1;
            break;
	   case UNINSTALL:         //DELETE  SERVER
	        UninstallService();
			return 1;
			break;
	   case NORMAL:        	   //NORMAL RUN
            NormalRun();
            break;
	   default:
	        break;
	   }
	if(AppRunWay==SERVICE){    //SERVER RUN
       SERVICE_TABLE_ENTRY DispatchTable[]={{"ShadowSniffer",ServiceMain},{NULL,NULL}};
       StartServiceCtrlDispatcher(DispatchTable);
	   }  
	return 0;
}

